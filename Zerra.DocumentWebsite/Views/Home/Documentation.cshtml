@{
    ViewData["Title"] = "Zerra Framework";
}

<h1>Zerra Framework - Documentation</h1>

<div class="row form-group">
    <div class="col-sm-3">
        <div class="left-pane">
            <strong>Zerra</strong><br />
            <a href="#map">Map</a><br />
            <a href="#graph">Graph</a><br />
            <a href="#config">Config</a><br />
            <strong>Zerra.Serialization</strong><br />
            <a href="#byteserializer">ByteSerializer</a><br />
            <a href="#jsonserializer">JsonSerializer</a><br />
            <strong>Zerra.Encryption</strong><br />
            <a href="#encryptioncommon">EncryptionCommon</a><br />
            <a href="#compressioncommon">CompressionCommon</a><br />
            <a href="#hasher">Hasher</a><br />
            <strong>Zerra.Log</strong><br />
            <a href="#log">Log</a><br />
            <a href="#log">ILoggingProvider</a><br />
            <strong>Zerra.Providers</strong><br />
            <a href="#resolver">Resolver</a><br />
            <a href="#resolver">BaseLayerProvider</a><br />
            <a href="#resolver">IBaseProvider</a><br />
            <a href="#resolver">ICacheProvider</a><br />
            <a href="#resolver">ICompressionProvider</a><br />
            <a href="#resolver">IRuleProvider</a><br />
            <a href="#resolver">IDualBaseProvider</a><br />
            <strong>Zerra.Reflection</strong><br />
            <a href="#typeanalyzer">TypeAnalyzer</a><br />
            <a href="#typeanalyzer">CoreType</a><br />
            <a href="#typeanalyzer">Discovery</a><br />
            <a href="#typeanalyzer">TypeLookup</a><br />
            <strong>Zerra.Linq</strong><br />
            <a href="#typeanalyzer">WhereBuilder</a><br />
        </div>
    </div>
    <div class="col-sm-9">
        <div class="right-pane">
            <div id="map">
                <h3>Map</h3>
                <p>A class to help map object properties from one type to another.  Best used for converting data objects to domain objects to view items.  There is an extension method on all objects.  By default it will match properties by name and type.  You can customize a mapping using IMapDefinition.</p>
                <img src="~/images/Map1.jpg" />
                <p>Map definitions can be created for any time except the core types.  Maps are compiled into itermediate language so run as fast or faster than writting it out in C#.</p>
                <img src="~/images/Map2.jpg" />
            </div>
            <div id="graph">
                <h3>Graph</h3>
                <p>A class that defines what properties of an object that will be used in an action.  Used in repositories, serializers, and event stores to determine which properties to read or save.  Includes sub-objects that may also be a data relation.  An empty or null graph will assume all local properties.</p>
                <img src="~/images/Graph1.jpg" />
                <p>There is also a boolean overload to include all local properties.</p>
                <img src="~/images/Graph2.jpg" />
            </div>
            <div id="config">
                <h3>Config</h3>
                <p>A static that class handles configuration for the application.  This is one of the few dependencies of the framework where it uses Microsoft.Extensions.Configuration to make it seemless with existing platforms and will read appsettings.config. It needs loaded on application startup accepting startup args and can optionally encrypt the appsettings.</p>
                <img src="~/images/Config1.jpg" />
                <p>Access values using the Config class.</p>
                <img src="~/images/Config3.jpg" />
                <p>In Asp.Net load the IConfigurationRoot in the Startup.cs</p>
                <img src="~/images/Config2.jpg" />
            </div>
            <div id="byteserializer">
                <h3>ByteSerializer</h3>
                <p>A high-performance minimal-data serializer.  30% less data than the traditional BinarySerializer and up to 5x faster.  Used for data transfer and storage.  This is done by assigning indexes to properties so it depends on contracts being idential.</p>
                <img src="~/images/ByteSerializer1.jpg" />
                <p>For scenarios where the data contract might change there are property attributes to control the serializaion indexes.</p>
                <img src="~/images/ByteSerializer3.jpg" />
                <p>For more complex scenarios where data contracts might change or objects boxed there are overloads to map by property name and/or include the object type.</p>
                <img src="~/images/ByteSerializer2.jpg" />
            </div>
            <div id="jsonserializer">
                <h3>JsonSerializer</h3>
                <p>A basic json serializer.  50% faster than Newtonsoft.Json with a few special features.</p>
                <img src="~/images/JsonSerializer1.jpg" />
                <p>The serializer can accept a Graph object to determine which properties to serialize or deserialize.</p>
                <img src="~/images/JsonSerializer2.jpg" />
                <p>The special format JsonNameless takes all the property names out and makes everything arrays.  A JavaScript front end can remap these to models resulting in a large reduction in data transfer size.</p>
                <img src="~/images/JsonSerializer3.jpg" />
                <p>The demo project has an example with T4 and JavaScripts on how this can be done.</p>
                <img src="~/images/JsonSerializer4.jpg" />
            </div>
            <div id="encryptioncommon">
                <h3>EncryptionCommon</h3>
                <p>A static class that the framework uses for various encryption purposes.  It uses an AES implementation.  The keys should be set at application startup.</p>
                <img src="~/images/EncryptionCommon1.jpg" />
                <p>A good strategy would be to use this class throughout the system.</p>
                <img src="~/images/EncryptionCommon2.jpg" />
            </div>
            <div id="compressioncommon">
                <h3>CompressionCommon</h3>
                <p>A static class that the framework uses for various compression purposes.  There is a method to identify compressiable object properties but otherwise there is nothing particulary special.</p>
                <img src="~/images/CompressionCommon1.jpg" />
            </div>
            <div id="hasher">
                <h3>Hasher</h3>
                <p>A static class that the framework uses for various hash purposes.  Contains cryptographically strong implementations for passwords and other security features.</p>
                <img src="~/images/Hasher1.jpg" />
            </div>
            <div id="log">
                <h3>Log</h3>
                <p>A static class that the framework uses to log events.  It can be implemented through ILoggingProvider with the framework will automatically find.</p>
                <img src="~/images/Log1.jpg" />
            </div>
            <div id="resolver">
                <h3>Resolver</h3>
                <p>This class produces instances inheriting IBaseProvider.  The framework finds these automatically.  This is a replacement for the constructor injection pattern which can be troublesome in various scenarios.</p>
                <img src="~/images/Resolver1.jpg" />
                <br />
                <img src="~/images/Resolver2.jpg" />
            </div>
            <div id="resolver">
                <h3>TypeAnalyzer</h3>
                <p>One of the core components in the framework used for fast dynamic manipulation. If any reflection is needed this and related classes take care of it including reading and writing properties or creating objects with very fast generated intermediate language.</p>
                <img src="~/images/TypeAnalyzer1.jpg" />
                <br />
                <img src="~/images/TypeAnalyzer2.jpg" />
                <br />
                <img src="~/images/TypeAnalyzer3.jpg" />
            </div>
        </div>
    </div>
</div>